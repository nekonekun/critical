import json
import aiokafka
import faker
import datetime
import pytest
import tests.mocked_bot

from critical.manipulator.models import GELFMessage


k_creds = {'bootstrap_servers': 'localhost',
           'topic': 'test-critical',
           'group_id': 'test-critical.test'}
r_creds = {'host': 'localhost',
           'db': 0}
t_creds = {'token': '1234567890:AAAAAbbbbbCddEEff0GhhIIII0J-K0llllM',
           'receivers': [10, 20, -100, -50]}


@pytest.fixture
def composer():
    return MessageComposer()


@pytest.fixture
def kafka_creds():
    return k_creds


@pytest.fixture
async def kafka_producer(kafka_creds):
    return aiokafka.AIOKafkaProducer(
        bootstrap_servers=kafka_creds['bootstrap_servers'])


@pytest.fixture
async def kafka_consumer(kafka_creds):
    creds = kafka_creds.copy()
    topic = creds.pop('topic')
    return aiokafka.AIOKafkaConsumer(topic, **creds)


@pytest.fixture
def redis_creds():
    return r_creds


@pytest.fixture
def telegram_creds():
    return t_creds


@pytest.fixture
def telegram_bot():
    return tests.mocked_bot.MockedBot()


@pytest.fixture
def telegram_chat_ids(telegram_creds):
    return telegram_creds['receivers']


class MessageComposer:
    def __init__(self):
        self.fake = faker.Faker()
        faker.Faker.seed(0)

    def message_dict(self, hostname: str = None,
                     short: str = None,
                     ip_address: str = None):
        fake_hostname = hostname or self.fake.hostname()
        fake_sentence = short or self.fake.sentence()
        fake_short = fake_sentence
        fake_datetime = datetime.datetime. \
            now(). \
            replace(tzinfo=datetime.timezone.utc)
        fake_long = '<190>' + fake_datetime.strftime('%Y-%m-%d %H:%M:%S') + ' '
        fake_long += fake_hostname + ' ' + fake_short
        msg_dict = {"version": "1.1",
                    "timestamp": int(fake_datetime.timestamp()),
                    "host": fake_hostname,
                    "short_message": fake_short,
                    "level": 6,
                    "full_message": fake_long,
                    "_level": 6,
                    "_gl2_remote_ip": ip_address or self.fake.ipv4(),
                    "_gl2_remote_port": 33333,
                    "_gl2_message_id": "OSHEIN4AICHIBUI1IO0IEWEIRA",
                    "_kafka_topic": "test-critical",
                    "_source": fake_hostname,
                    "_message": fake_short,
                    "_gl2_source_input": "0123456789abcdef01234567",
                    "_full_message": fake_long,
                    "_facility_num": 23,
                    "_forwarder": "org.graylog2.outputs.GelfOutput",
                    "_gl2_source_node": self.fake.uuid4(),
                    "_id": self.fake.uuid4(),
                    "_facility": "local7",
                    "_timestamp": fake_datetime.isoformat()}
        return msg_dict

    def message(self, hostname: str = None,
                short: str = None,
                ip_address: str = None):
        msg_dict = self.message_dict(hostname, short, ip_address)
        return json.dumps(msg_dict)

    def gelf(self, hostname: str = None,
             short: str = None,
             ip_address: str = None):
        msg_dict = self.message_dict(hostname, short, ip_address)
        return GELFMessage(**msg_dict)
